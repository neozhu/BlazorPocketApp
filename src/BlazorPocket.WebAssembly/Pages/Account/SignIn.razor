@page "/account/signin"
@using BlazorPocket.WebAssembly.Layout
@using System.ComponentModel.DataAnnotations
<PageTitle>Login</PageTitle>
<MudPaper Elevation="3" Class="pa-8" Width="100%" MaxWidth="500px">
    <div class="d-flex flex-row  align-center gap-3 my-3">
        <MudBlazorLogo Style="with:60px;height:60px"></MudBlazorLogo>
        <MudText Typo="Typo.h5">BlazorPocket App</MudText>
    </div>
    <div class="d-flex flex-column gap-2">

        <div class="d-flex flex-row gap-1">
            <MudText>Don't have an account?</MudText> <MudLink Href="/account/signup">Signup</MudLink>
        </div>

        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="d-flex flex-column gap-2">
                <MudTextField @bind-Value="model.Email" For="@(() => model.Email)"
                              Label="Email" Placeholder="Email"
                              Required="true" RequiredError="Email is required">
                </MudTextField>
                <MudTextField InputType="@PasswordInput" @bind-Value="model.Password" For="@(() => model.Password)" Label="Password" Placeholder="Password" Required="true" RequiredError="Password is required" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonPasswordClick" AdornmentAriaLabel="Show Password"></MudTextField>
                <div class="d-flex flex-row align-center justify-space-between">
                    <MudCheckBox T="bool">remember me</MudCheckBox>
                    <MudLink Href="/account/forgetpassword">forget password?</MudLink>
                </div>
                <MudButton ButtonType="ButtonType.Submit" FullWidth="true" Color="Color.Primary" Variant="Variant.Filled">Sign In</MudButton>
            </div>
        </EditForm>
    </div>

</MudPaper>
@code {
    private SignInModel model = new SignInModel()
        {
            Email = "demo@blazors.app",
            Password = "demo12345!"
        };

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    private async Task OnValidSubmit(EditContext context)
    {
        try
        {
            var result = await PocketbaseClient.Sdk.User.AuthenticateWithPasswordAsync(model.Email, model.Password);
            if (result?.Record?.Verified ?? false)
            {
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Your account is not verified. Please check your email for the verification link.", Severity.Error);
            }
        }
        catch (Exception e)
        {
            Snackbar.Add("Authentication failed. Please check your email and password and try again.", Severity.Error);
        }
    }

    void ButtonPasswordClick()
    {
        if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }


    public class SignInModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;
        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 6 characters long.", MinimumLength = 6)]
        [RegularExpression(@"^(?=.*[A-Za-z])(?=.*\d)(?=.*[\W_]).{6,}$", ErrorMessage = "Password must be at least 6 characters long and contain at least one letter, one number, and one special character.")]
        public string Password { get; set; } = string.Empty;

    }
}
