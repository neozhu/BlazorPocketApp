@page "/_/auth/confirm-password-reset/{token}"
@using BlazorPocket.WebAssembly.Layout
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
<PageTitle>Confirm password reset</PageTitle>
<MudPaper Elevation="3" Class="pa-8" Width="100%" MaxWidth="500px">
    <div class="d-flex flex-row  align-center gap-3 my-3">
        <MudBlazorLogo Style="with:60px;height:60px"></MudBlazorLogo>
        <MudText Typo="Typo.h5">Set new password</MudText>
    </div>
    <div class="d-flex flex-column gap-2">
        @if (string.IsNullOrEmpty(message))
        {
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <div class="d-flex flex-column gap-2">
                    <MudText>Reset your user password for @model.Email</MudText>
                    <MudTextField InputType="InputType.Password" Label="New password" @bind-Value="model.Password" For="@(() => model.Password)" ShrinkLabel="true"></MudTextField>
                    <MudTextField InputType="InputType.Password" Label="New password confirm" @bind-Value="model.PasswordConfirm" For="@(() => model.PasswordConfirm)" ShrinkLabel="true"></MudTextField>
                    <MudButton ButtonType="ButtonType.Submit" FullWidth="true" Color="Color.Primary" Variant="Variant.Filled">Set new password</MudButton>
                </div>
            </EditForm>
        }
        else
        {
            <MudAlert Severity="Severity.Error">@message</MudAlert>
        }
    </div>
</MudPaper>
@code {
    [Parameter]
    public string? Token { get; set; }
    private ForgetPasswordConfirmModel model = new();
    private string? message;
    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(Token))
        {
            message = "Invalid or missing token. Please check your verification link.";
        }
        else
        {
            try
            {
                model.PasswordResetToken = Token;
                model.Email = getEmailFromToken(Token); ;
            }
            catch (Exception e)
            {
                message = e.Message;
            }
        }
    }
    private string getEmailFromToken(string token)
    {
        // Split the token into its parts
        var parts = token.Split('.');
        if (parts.Length != 3)
        {
            throw new ArgumentException("Invalid token format");
        }

        // Decode the payload part (second part) from Base64
        var payload = parts[1];
        var jsonBytes = parseBase64WithoutPadding(payload);
        var keyValuePairs = JsonSerializer.Deserialize<IDictionary<string, object>>(jsonBytes);
        // Extract the email from the dictionary
        if (keyValuePairs != null && keyValuePairs.TryGetValue("email", out var email))
        {
            return email.ToString();
        }
        else
        {
            throw new ArgumentException("Email not found in token");
        }
    }
    private byte[] parseBase64WithoutPadding(string base64)
    {
        switch (base64.Length % 4)
        {
            case 2:
                base64 += "==";
                break;
            case 3:
                base64 += "=";
                break;
        }
        return Convert.FromBase64String(base64);
    }

    private async Task OnValidSubmit(EditContext context)
    {
        try
        {
            await PocketbaseClient.Sdk.User.ConfirmPasswordResetAsync(model.PasswordResetToken, model.Password, model.PasswordConfirm);
            var result = await PocketbaseClient.Sdk.User.AuthenticateWithPasswordAsync(model.Email, model.Password);
            StateHasChanged();
        }
        catch (Exception e)
        {
            Snackbar.Add("Password reset request failed. Please check the email address and try again.", Severity.Error);
        }
    }

    public class ForgetPasswordConfirmModel
    {
        [Required]
        public string PasswordResetToken { get; set; } = string.Empty;
        [Required]
        public string Email { get; set; } = string.Empty;
        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 6 characters long.", MinimumLength = 6)]
        [RegularExpression(@"^(?=.*[A-Za-z])(?=.*\d)(?=.*[\W_]).{6,}$", ErrorMessage = "Password must be at least 6 characters long and contain at least one letter, one number, and one special character.")]
        public string Password { get; set; } = string.Empty;
        [Required]
        [Compare(nameof(Password))]
        public string PasswordConfirm { get; set; } = string.Empty;
    }
}
