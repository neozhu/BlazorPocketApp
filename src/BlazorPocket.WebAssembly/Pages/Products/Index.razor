@page "/products/index"
@using PocketBaseClient.BlazorPocket.Models
@using pocketbase_csharp_sdk.Models

<PageTitle>Product</PageTitle>

<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-3">
    <MudStack Spacing="0">
        <MudText Typo="Typo.h5">Product overview</MudText>
        <MudText Typo="Typo.body2">View all products</MudText>
    </MudStack>
    <MudStack Row Spacing="2">
        <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add">New</MudButton>
        <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Delete">Delete</MudButton>
    </MudStack>
</MudStack>

<MudDataGrid T="Product" ServerData="@(ServerReload)">
    <Columns>
        <PropertyColumn Property="x => x.Name" Title="Product Name" />
        <PropertyColumn Property="x => x.Description" />
        <PropertyColumn Property="x => x.Spec"  />
        <PropertyColumn Property="x => x.Unit" />
        <PropertyColumn Property="x => x.Price">
            <CellTemplate>
                <MudStack Row Spacing="1">
                    <MudText>@context.Item.Price?.ToString("#,#")</MudText>
                    <MudText Typo="Typo.body1">@context.Item.Currency?.ToString().ToUpper()</MudText>
                </MudStack>
            </CellTemplate>
        </PropertyColumn>
     
    </Columns>
</MudDataGrid>


@code {
    private string? keyword;
    private List<Product>? list=new List<Product>();
    private PagedCollectionModel<Product> result = new PagedCollectionModel<Product>();
    private CollectionProducts query => PocketbaseClient.Data.ProductsCollection;
    private bool loading;

    private async Task<GridData<Product>> ServerReload(GridState<Product> state)
    {
        try
        {
            loading = true;
            var result = await query.GetPagedItemsAsync(state.Page, state.PageSize);
            return new GridData<Product> { TotalItems = result.TotalItems, Items = result.Items ?? Enumerable.Empty<Product>() };
        }
        finally
        {
            loading = false;
        }
    }
    private async Task Query()
    {
        list = new List<Product>();
        var products = PocketbaseClient.Data.ProductsCollection;
        // var result = await products.Filter(x => x.Name.Contains(keyword)).GetPagedItemsAsync(1, 50);
        // list = result.Items?.ToList();
        list =(await products.GetFullListAsync()).ToList();
    }
}
