@page "/products/index"
@using PocketBaseClient.BlazorPocket.Models
@using pocketbase_csharp_sdk.Models

<PageTitle>@L["Product"]</PageTitle>

<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-3">
    <MudStack Spacing="0">
        <MudText Typo="Typo.h5">@L["Product overview"]</MudText>
        <MudText Typo="Typo.body2">@L["View all products"]</MudText>
    </MudStack>
    <MudStack Row Spacing="2">
        <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" OnClick="@(()=>OnCreate())">@L["New"]</MudButton>
        <MudButton Variant="Variant.Outlined" Disabled="@(!selectedItems.Any())" OnClick="@(()=>OnDelete())" StartIcon="@Icons.Material.Filled.Delete">@L["Delete"]</MudButton>
    </MudStack>
</MudStack>

<MudDataGrid @ref="dataGrid" Loading="@loading" ServerData="@(ServerReload)" MultiSelection="true" @bind-SelectedItems="selectedItems">
    <ToolBarContent>
        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="flex-grow-1 mb-3">
            <MudSpacer></MudSpacer>
            <MudSpacer></MudSpacer>
            <MudTextField T="string" @bind-Value="keyword" TextChanged="@(()=>dataGrid.ReloadServerData())" Placeholder="Search" Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small">
            </MudTextField>
        </MudStack>

    </ToolBarContent>
    <Columns>
        <SelectColumn ShowInFooter="false"></SelectColumn>
        <TemplateColumn CellStyle="width:60px" Title="Command" Sortable="false">
            <CellTemplate>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => OnEdit(context.Item))"></MudIconButton>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Name" Title="@L["Product Name"]" />
        <PropertyColumn Property="x => x.Description" Title="@L["Description"]" />
        <PropertyColumn Property="x => x.Spec" Title="@L["Spec"]" />
        <PropertyColumn Property="x => x.Unit" Title="@L["Unit"]" />
        <PropertyColumn Property="x => x.Price" Title="@L["Price"]">
            <CellTemplate>
                <MudStack Row Spacing="1">
                    <MudText>@context.Item.Price?.ToString("#,#")</MudText>
                    <MudText Typo="Typo.body1">@context.Item.Currency?.ToString().ToUpper()</MudText>
                </MudStack>
            </CellTemplate>
        </PropertyColumn>

    </Columns>
</MudDataGrid>


@code {
    private string? keyword;
    private HashSet<Product> selectedItems = new();
    private MudDataGrid<Product> dataGrid = default!;
    private CollectionProducts query => PocketbaseClient.Data.ProductsCollection;
    private bool loading;

    private async Task<GridData<Product>> ServerReload(GridState<Product> state)
    {
        try
        {
            selectedItems = new();
            loading = true;
            var result = await query.Filter(x => x.Name.Contains(keyword).Or(x.Description.Contains(keyword))).GetPagedItemsAsync(state.Page, state.PageSize);
            return new GridData<Product> { TotalItems = result.TotalItems, Items = result.Items ?? Enumerable.Empty<Product>() };
        }
        finally
        {
            loading = false;
        }
    }
    private async Task OnDelete()
    {

        await DialogServiceHelper.ShowConfirmationDialog(title: L["Delete Confirmation"],
                                                                    contentText: string.Format(L["Are you sure you want to delete the selected items: {0}?"], selectedItems.Count),
                                                                    async ()=>
                                                                    {
                                                                        foreach (var item in selectedItems)
                                                                        {
                                                                            query.Delete(item);
                                                                        }
                                                                        await query.SaveChangesAsync();
                                                                        await dataGrid.ReloadServerData();
                                                                    });
    }

    private async Task OnCreate()
    {
        var product = new Product();
        await ShowEditDialog(product, L["Create a product"],
            async () =>
            {
                await product.SaveAsync();
                await dataGrid.ReloadServerData();
            },
            () =>{
                product.Delete();
                return Task.CompletedTask;
            }
        );
    }

    private async Task OnEdit(Product item)
    {
        await ShowEditDialog(item, L["Edit the product"],
            async () =>
            {
                await item.SaveAsync();
                await dataGrid.ReloadServerData();
            },
           () => item.ReloadAsync()
        );
    }

    private async Task ShowEditDialog(Product product, string title, Func<Task> onSave, Func<Task>? onCancel = null)
    {
        var parameters = new DialogParameters<EditFormDialog>
        {
            { x=>x.Model, product }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<EditFormDialog>(title, parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await onSave();
        }
        else if (onCancel != null)
        {
            await onCancel();
        }
    }
}
